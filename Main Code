def analyse(board):
    c = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
    for i in range(8):
        if board[c[i][0]] != 0 and board[c[i][0]] == board[c[i][1]] and board[c[i][1]] == board[c[i][2]]:
            return board[c[i][0]]
    return 0

def constboard(board):
    print("The current state of the board:\n")
    for i in range(9):
        if i > 0 and i % 3 == 0:
            print("\n")
        if board[i] == 0:
            print("_ ", end=" ")
        elif board[i] == 1:
            print("O ", end=" ")
        elif board[i] == -1:
            print("X ", end=" ")
    print("\n")

def UserOneTurn(board):
    pos = int(input("Enter 'X' position [1-9]: "))
    if board[pos - 1] != 0:
        print("WRONG MOVE!!")
        exit(0)
    board[pos - 1] = -1

def UserTwoTurn(board):
    pos = int(input("Enter 'O' position [1-9]: "))
    if board[pos - 1] != 0:
        print("WRONG MOVE!!")
        exit(0)
    board[pos - 1] = 1

def minimax(board, player):
        x=analyse(board)
        if(x!=0):
            return (x*player)
        pos = -1
        value = -2
        for i in range(9):
            if board[i] == 0:
                board[i] = player
                score = -minimax(board, player * -1)
                board[i] = 0
                if score > value:
                    value = score
                    pos = i
            if pos == -1:
                return 0
        return value

def CompTurn(board):
    # Prioritize blocking the player's winning moves
    c = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]
    for i in range(8):
        if board[c[i][0]] == -1 and board[c[i][1]] == -1 and board[c[i][2]] == 0:
            board[c[i][2]] = 1
            return
        if board[c[i][0]] == -1 and board[c[i][2]] == -1 and board[c[i][1]] == 0:
            board[c[i][1]] = 1
            return
        if board[c[i][1]] == -1 and board[c[i][2]] == -1 and board[c[i][0]] == 0:
            board[c[i][0]] = 1
            return

    # If no blocking moves are available, use the minimax algorithm
    pos = -1
    value = -2
    for i in range(9):
        if board[i] == 0:
            board[i] = 1
            score = -minimax(board, -2)
            board[i] = 0
            if score > value:
                value = score
                pos = i
    board[pos] = 1

def main():
    print("Enter 1 for single player or 2 for multi-player")
    choice = int(input())
    board = [0,0,0,0,0,0,0,0,0]
    if choice == 1:
        print("Computer O vs You X: \n")
        print("Enter to play 1st(1) or 2nd(2): ")
        player = int(input())
        if(player==1):
          print("You are PLAYER 1 and Computer is PLAYER 2")
        else:
          print("You are PLAYER 2 and Computer is PLAYER 1")
        for i in range(9):
            if analyse(board) != 0:
                break
            if (i + player) % 2 == 0:
                CompTurn(board)
            else:
                constboard(board)
                UserOneTurn(board)
    else:
        for i in range(9):
            if analyse(board) != 0:
                break

            constboard(board)
            if i % 2 == 0:
                UserOneTurn(board)
            else:
                UserTwoTurn(board)

    constboard(board)
    result = analyse(board)
    if result == 0:
        print("DRAW!!")
    elif result == -1:
        print("PLAYER 1 has won!!")
    else:
        print("PLAYER 2 has won!!")

if __name__ == "__main__":
    main()
